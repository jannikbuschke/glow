
trigger:
- master

pool:
  vmImage: 'windows-2019'

variables:
  buildConfiguration: 'Release'
  system.debug: false

steps:
- checkout: self
  submodules: true

- script: 'ls $(Build.ArtifactStagingDirectory)/*.nupkg'

- task: NuGetToolInstaller@1
  inputs:
    versionSpec: '5.x'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: 'restore'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    publishWebProjects: false # mutually exclusive with 'projects'
    projects: './sample/sample.csproj'
    arguments: --configuration $(buildConfiguration)

# - task: DotNetCoreCLI@2
#   inputs:
#     command: test
#     projects: ./test/test.csproj
#     arguments: -c $(buildConfiguration) --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true
#   displayName: dotnet test

# - task: DotNetCoreCLI@2
#   inputs:
#     command: custom
#     custom: tool
#     arguments: install --tool-path . dotnet-reportgenerator-globaltool
#   displayName: dotnet tool install dotnet-reportgenerator

# - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
#   displayName: generate reports

# - task: PublishCodeCoverageResults@1
#   displayName: 'publish code coverage'
#   inputs:
#     codeCoverageTool: Cobertura
#     summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack'
  inputs:
    command: 'pack'
    packagesToPack: 'core/glow.core.csproj'
    includesymbols: true
    includesource: true
    versioningScheme: 'off'

# - task: DotNetCoreCLI@2
#   displayName: 'dotnet nuget push'
#   inputs:
#     command: 'custom'
#     custom: 'nuget push --api-key $(nuget_key)'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
#     nuGetFeedType: 'external'
#     publishFeedCredentials: 'nuget.org'

- script: 'ls $(Build.ArtifactStagingDirectory)/*.nupkg'

# - task: NuGetCommand@2
#   displayName: 'NuGet push'
#   inputs:
#     command: push
#     nuGetFeedType: external
#     publishFeedCredentials: nuget.org
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
#   condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))
