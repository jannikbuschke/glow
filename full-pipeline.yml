name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

trigger:
  - chore/full-pipeline

pool:
  vmImage: "windows-2019"

variables:
  buildConfiguration: "Release"
  system.debug: false
  buildNumber: 0.24.0-$(Rev:.r)

stages:
  - stage: Checks
    jobs:
      - job: "Check_for_changes"
        steps:
          - script: echo $(name)
          - checkout: self
            submodules: "recursive"
          # - template: check-changes-template.yml
          #   parameters:
          #     path: core
          # - template: check-changes-template.yml
          #   parameters:
          #     path: templates
          # - template: check-changes-template.yml
          #   parameters:
          #     path: docs
      - job: "Publish_nuget"
        # dependsOn: "Check_for_changes"
        # condition: eq(dependencies.Check_for_changes.outputs['check_changes_core.SOURCE_CODE_CHANGED'], 'true')
        steps:
          - checkout: self
            submodules: true

          - task: NuGetToolInstaller@1
            inputs:
              versionSpec: "5.x"

          - task: DotNetCoreCLI@2
            displayName: "dotnet restore"
            inputs:
              command: "restore"

          # - task: DotNetCoreCLI@2
          #   displayName: "dotnet build"
          #   inputs:
          #     command: "build"
          #     publishWebProjects: false
          #     projects: "./sample/sample.csproj"
          #     arguments: --configuration $(buildConfiguration)

          # - task: DotNetCoreCLI@2
          #   inputs:
          #     command: test
          #     projects: ./test/test.csproj
          #     arguments: -c $(buildConfiguration) --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true
          #   displayName: dotnet test

          # - task: DotNetCoreCLI@2
          #   inputs:
          #     command: custom
          #     custom: tool
          #     arguments: install --tool-path . dotnet-reportgenerator-globaltool
          #   displayName: dotnet tool install dotnet-reportgenerator

          # - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
          #   displayName: generate reports

          # - task: PublishCodeCoverageResults@1
          #   displayName: 'publish code coverage'
          #   inputs:
          #     codeCoverageTool: Cobertura
          #     summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml

          - task: DotNetCoreCLI@2
            displayName: "dotnet pack"
            inputs:
              command: "pack"
              arguments: "-p:SymbolPackageFormat=snupkg"
              packagesToPack: "**/*.csproj"
              versioningScheme: "byBuildNumber"
              # versionEnvVar: buildNumber

          - script: "ls $(Build.ArtifactStagingDirectory)/*.nupkg"
            displayName: "ls"

          - script: 'dotnet nuget push $(Build.ArtifactStagingDirectory)\*.nupkg --api-key $(nuget_key) --source https://api.nuget.org/v3/index.json'
            displayName: "dotnet nuget push"

        # - task: DotNetCoreCLI@2
        #   displayName: 'dotnet nuget push'
        #   inputs:
        #     command: 'custom'
        #     custom: 'nuget push --api-key $(nuget_key)'
        #     packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
        #     nuGetFeedType: 'external'
        #     publishFeedCredentials: 'nuget.org'

        # - task: NuGetCommand@2
        #   displayName: 'NuGet push'
        #   inputs:
        #     command: push
        #     nuGetFeedType: external
        #     publishFeedCredentials: nuget.org
        #     packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
        #   condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))
