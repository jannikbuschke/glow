using System;
using System.Collections.Generic;
using Glow.Configurations;
using Reinforced.Typings.Ast.TypeNames;
using Reinforced.Typings.Fluent;

namespace Glow.Core
{
    public static class InterfaceExportBuilderExtensions
    {
        public static InterfaceExportBuilder<T> WithDefaults<T>(this InterfaceExportBuilder<T> builder)
        {
            return builder.WithPublicProperties()
                .Substitute(typeof(string), new RtSimpleTypeName("string|null"))
                .Substitute(typeof(Guid), new RtSimpleTypeName("string"))
                .Substitute(typeof(Guid?), new RtSimpleTypeName("string|null"))
                .Substitute(typeof(DateTime?), new RtSimpleTypeName("string|null"))
                .Substitute(typeof(DateTime), new RtSimpleTypeName("string"))
                .Substitute(typeof(IEnumerable<string>), new RtSimpleTypeName("string[]"))
                .Substitute(typeof(string[]), new RtSimpleTypeName("string[]"))
                .AutoI(false);
        }
    }

    public class TypescriptGenerationConfiguration
    {
        public static void Configure(ConfigurationBuilder builder)
        {
            builder.Global(options =>
            {
                options.CamelCaseForProperties(true);
                options.UseModules(true);
            });

            builder.ExportAsInterface<Profiles.Profile>()
                .WithDefaults();

            builder.ExportAsInterface<IConfigurationMeta>()
                .WithDefaults();
        }
    }
}


namespace RT
{

    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Reflection;
    using Glow.Core;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Hosting;
    using Microsoft.Extensions.Hosting;
    using Reinforced.Typings;
    using Reinforced.Typings.Fluent;
    using Reinforced.Typings.Visitors;
    using Reinforced.Typings.Visitors.TypeScript;
    using Reinforced.Typings.Visitors.Typings;

    public class ReinforcedTypings
    {
        public static TsExporter Initialize(
            Action<ConfigurationBuilder> configuration,
            string directory = "models",
            string file = "web/src/models.ts",
            bool useMultipleFiles = false)
        {
            var exporter = new TsExporter(
                new ExportContext(
                    new Assembly[] { Assembly.GetExecutingAssembly() },
                    new FilesOperations()
                )
                {
                    ConfigurationMethod = configuration,
                    Hierarchical = useMultipleFiles,
                    TargetDirectory = directory,
                    TargetFile = file
                });
            exporter.Initialize();
            return exporter;
        }
    }

    internal class FilesOperations : IFilesOperations
    {
        private readonly List<string> _tmpFiles = new List<string>();

        public ExportContext Context { get; set; }

        public void DeployTempFiles()
        {
            foreach (var tmpFile in _tmpFiles)
            {
                var origFile = Path.GetFileNameWithoutExtension(tmpFile);
                var origDir = Path.GetDirectoryName(tmpFile);
                origFile = Path.Combine(origDir, origFile);

                if (File.Exists(origFile))
                {
                    File.Delete(origFile);
                }

                File.Move(tmpFile, origFile);
                Console.WriteLine("File replaced: {0} -> {1}", tmpFile, origFile);
            }
        }

        protected virtual void ExportCore(StreamWriter tw, ExportedFile file)
        {

            TextExportingVisitor visitor =
                Context.Global.VisitorType == null
                    ? Context.Global.ExportPureTypings
                        ? new TypingsExportVisitor(tw, Context)
                        : new TypeScriptExportVisitor(tw, Context)
                    : (TextExportingVisitor) Activator.CreateInstance(Context.Global.VisitorType, new object[] { tw, Context });

            WriteWarning(tw);

            visitor.VisitFile(file);
        }

        public void Export(string fileName, ExportedFile file)
        {
            using (Stream fs = GetTmpFile(fileName))
            {
                using (var tw = new StreamWriter(fs))
                {
                    ExportCore(tw, file);
                }
            }
        }

        private void WriteWarning(TextWriter tw)
        {
            if (Context.Global.WriteWarningComment)
            {
                tw.WriteLine("//     This code was generated by a Reinforced.Typings tool. ");
                tw.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
                tw.WriteLine("//     the code is regenerated.");
                tw.WriteLine();
            }
        }

        private Stream GetTmpFile(string fileName)
        {
            fileName = fileName + ".tmp";

            var dir = Path.GetDirectoryName("./" + fileName);
            if (!Directory.Exists(dir))
            {
                Directory.CreateDirectory(dir);
            }

            if (File.Exists(fileName))
            {
                File.Delete(fileName);
            }
            Console.WriteLine("Temp file aquired: {0}", fileName);
            _tmpFiles.Add(fileName);


            return File.OpenWrite(fileName);
        }


        public void ClearTempRegistry()
        {
            _tmpFiles.Clear();
        }
    }

    public class CreateTypescriptDefinitions : IStartupFilter
    {
        private readonly IWebHostEnvironment environment;

        public CreateTypescriptDefinitions(IWebHostEnvironment environment)
        {
            this.environment = environment;
        }

        public Action<IApplicationBuilder> Configure(Action<IApplicationBuilder> next)
        {
            if (!environment.IsDevelopment())
            {
                return next;
            }
            Reinforced.Typings.TsExporter rt = ReinforcedTypings.Initialize(config =>
            {
                TypescriptGenerationConfiguration.Configure(config);
            });
            rt.Export(); // <-- this will create the ts files

            return next;
        }
    }
}
