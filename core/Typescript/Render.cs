using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Glow.Core.Linq;

namespace Glow.Core.Typescript
{
    public static class Render
    {
        public static void ToDisk(TypeCollection types, string path)
        {
            var builder = new StringBuilder();

            builder.AppendLine($"/* this file is autogenerated. Do not edit. */");
            builder.AppendLine("");

            var enums = types.Enums.Values.ToList().DistinctBy(v => v.Id);


            foreach (TsEnum tsEnum in enums)
            {
                RenderTsEnum(tsEnum, builder);
            }

            var t = types.Types.Values.Where(v => !v.IsPrimitive);

            IList<TsType> sorted = TopologicalSort(
                t.DistinctBy(v => v.Id),
                v => v.Properties?.Where(v => v.TsType.IsT0).Select(v => v.TsType.AsT0));

            sorted = sorted.Where(v => t.Contains(v)).ToList();

            foreach (TsType tsType in sorted)
            {
                RenderTsType(tsType, builder);
            }

            var missing = t.Where(v => !sorted.Contains(v)).ToList();

            foreach (TsType tsType in missing)
            {
                RenderTsType(tsType, builder);
            }

            builder.Insert(0, "\r\n");

            var text = builder.ToString();
            File.WriteAllText(path, text);
        }

        private static void RenderTsEnum(TsEnum type, StringBuilder builder)
        {
            var name = type.Name;
            builder.AppendLine($"export namespace {type.Namespace} {{");
            builder.AppendLine($"  export type {name} = {string.Join(" | ", type.Values.Select(v=>$@"""{v}"""))}");
            builder.AppendLine($@"  export const default{name} = ""{type.DefaultValue}""");
            builder.AppendLine("}");
            builder.AppendLine("");
        }

        private static void RenderTsType(TsType type, StringBuilder builder)
        {
            if (type.FullName == "Microsoft.Graph.Phone")
            {

            }

            var name = type.Name;
            builder.AppendLine($"export namespace {type.Namespace} {{");
            builder.AppendLine($"  export interface {name} {{");
            if (type.Properties != null)
            {
                foreach (Property v in type.Properties)
                {
                    builder.AppendLine($"    {v.PropertyName}: {v.TypeName}");
                }
            }

            builder.AppendLine("  }");
            builder.AppendLine("");

            if (type.DefaultValue != null)
            {
                builder.AppendLine($"  export const default{name}: {name} = {{");
                foreach (Property property in type.Properties)
                {
                    builder.AppendLine($"    {property.PropertyName}: {property.DefaultValue ?? "null"},");
                }
                builder.AppendLine("  }");
            }

            builder.AppendLine("}");

            builder.AppendLine("");
        }

        public static IList<T> TopologicalSort<T>(
            IEnumerable<T> source,
            Func<T, IEnumerable<T>> getDependencies
        ) where T: TsType
        {
            var sorted = new List<T>();
            var visited = new Dictionary<T, bool>();

            foreach (T item in source)
            {
                try
                {
                    Visit(item, getDependencies, sorted, visited);
                }
                catch (ArgumentException) { }
            }

            return sorted;
        }

        public static void Visit<T>(
            T item,
            Func<T, IEnumerable<T>> getDependencies,
            List<T> sorted,
            Dictionary<T, bool> visited
        ) where T: TsType
        {
            var alreadyVisited = visited.TryGetValue(item, out var inProcess);

            if (alreadyVisited)
            {
                if (inProcess)
                {
                    throw new ArgumentException($"Cyclic dependency found. ({item.Name})");
                }
            }
            else
            {
                visited[item] = true;

                IEnumerable<T> dependencies = getDependencies(item);
                if (dependencies != null)
                {
                    foreach (T dependency in dependencies)
                    {
                        Visit(dependency, getDependencies, sorted, visited);
                    }
                }

                visited[item] = false;
                sorted.Add(item);
            }
        }
    }
}
