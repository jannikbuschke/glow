using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using Glow.TypeScript;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc.ApiExplorer;
using Microsoft.Extensions.Hosting;
using Microsoft.VisualStudio.Services.Common;

namespace Glow.Core.Typescript
{

    public class GenerateTsModelsAtStartup : IStartupFilter
    {
        private readonly IApiDescriptionGroupCollectionProvider descriptionGroupCollectionProvider;
        private readonly IApiDescriptionProvider descriptionProvider;
        private readonly IWebHostEnvironment environment;
        private readonly AssembliesToScan assembliesToScan;

        public GenerateTsModelsAtStartup(
            IApiDescriptionGroupCollectionProvider descriptionGroupCollectionProvider,
            IApiDescriptionProvider descriptionProvider,
            IWebHostEnvironment environment,
            AssembliesToScan assembliesToScan
        )
        {
            this.descriptionGroupCollectionProvider = descriptionGroupCollectionProvider;
            this.descriptionProvider = descriptionProvider;
            this.environment = environment;
            this.assembliesToScan = assembliesToScan;
        }

        public Action<IApplicationBuilder> Configure(Action<IApplicationBuilder> next)
        {
            if (!environment.IsDevelopment())
            {
                return next;
            }

            IEnumerable<Type> profileTypes = assembliesToScan.Value.SelectMany(v => v.GetTypes())
           .Where(v => v.IsSubclassOf(typeof(TypeScriptProfile)));
            //var schemas = new WorkflowSchemas();

            var entities = new StringBuilder();
            var allEntityNames = new List<string>();

            var builder = new StringBuilder();
            builder.AppendLine($"/* this file is autogenerated. Do not edit. */");
            builder.AppendLine("");

            profileTypes.Select(v => Activator.CreateInstance(v) as TypeScriptProfile)
                .ForEach(type =>
                {
                    Extensions2.AddAllTypes(type.Types);
                });

            foreach (Type profileType in profileTypes)
            {
                var profile = Activator.CreateInstance(profileType) as TypeScriptProfile;


                foreach (Type type in profile.Types)
                {
                    Render(type, builder, entities, allEntityNames);
                }
            }
            foreach (Type type in GenerateApiClientsAtStartup.CustomTypes)
            {
                Render(type, builder, entities, allEntityNames);
            }
            builder.AppendLine("export declare module Entities {");

            builder.AppendLine(entities.ToString());

            builder.AppendLine($"  export type All = {string.Join(" | ", allEntityNames)}");
            builder.AppendLine("}");
            builder.Insert(0, "\r\n");
            //builder.Insert(0, "/* eslint-disable prettier/prettier */");
            System.IO.File.WriteAllText("web/src/ts-models.ts", builder.ToString());

            return next;
        }

        private static void Render(Type type, StringBuilder builder, StringBuilder entities, List<string> allEntities)
        {
            allEntities.Add(type.Name);

            Console.WriteLine("export " + type.Name);

            entities.AppendLine(@$"  export type {type.Name} = ""{type.FullName}""");

            builder.AppendLine($"export interface {type.Name} {{");
            type.GetProperties(BindingFlags.Public | BindingFlags.Instance).ForEach(v =>
            {
                builder.AppendLine($"  {v.Name.CamelCase()}: {v.PropertyType.ToTsType()}");
            });
            builder.AppendLine("}");
            builder.AppendLine("");

            builder.AppendLine($"export const default{type.Name}: {type.Name} = {{");
            type.GetProperties(BindingFlags.Public | BindingFlags.Instance).ForEach(v =>
            {
                var value = v.PropertyType.DefaultValue();// v.PropertyType.IsValueType ? Activator.CreateInstance(v.PropertyType) : "null";
                builder.AppendLine($"  {v.Name.CamelCase()}: {value ?? "null"},");
            });
            builder.AppendLine("}");
            builder.AppendLine("");
        }
    }

    public static class Extensions2
    {
        private static readonly Dictionary<Type, string> typeDictionary = new Dictionary<Type, string>
            {
                { typeof(string), "string | null" },
                { typeof(int), "number" },
                { typeof(int?), "number | null" },
                { typeof(DateTime), "string" },
                { typeof(DateTime?), "string | null" },
                { typeof(Guid), "string" },
                { typeof(Guid?), "string | null" },
                { typeof(bool), "boolean" },
                { typeof(bool?), "boolean | null" },
                { typeof(Dictionary<string, string>), "{ [key: string]: string }" },
                { typeof(Dictionary<string, int>), "{ [key: string]: number }" },
                { typeof(Dictionary<string, object>), "{ [key: string]: any }" },
                { typeof(object), "any" }
            };

        private static readonly Dictionary<Type, string> defaults = new Dictionary<Type, string>
            {
                { typeof(string), @"""""" },
                { typeof(int), "0" },
                { typeof(int?), "null" },
                { typeof(DateTime), @"""1/1/0001 12:00:00 AM""" },
                { typeof(DateTime?), "null" },
                { typeof(Guid), @"""00000000-0000-0000-0000-000000000000""" },
                { typeof(Guid?), "null" },
                { typeof(bool), "false" },
                { typeof(bool?), "null" },
                { typeof(Dictionary<string, string>), "{}" },
                { typeof(Dictionary<string, int>), "{}" },
                { typeof(Dictionary<string, object>), "{}" },
            };

        public static void AddAllTypes(IEnumerable<Type> types)
        {
            types.ForEach(v => AddType(v));
        }

        public static void AddType(Type type)
        {
            typeDictionary.Add(type, type.Name);
        }

        public static string ToTsType(this Type t)
        {
            Dictionary<Type, string> types = typeDictionary;

            if (types.TryGetValue(t, out var result))
            {
                return result;
            }

            if (t.IsEnumerable())
            {
                return $"{(t.GetGenericArguments().FirstOrDefault() ?? typeof(object)).ToTsType()}[]";
            }

            return "any";
        }

        public static string DefaultValue(this Type t)
        {
            //var types = typeDictionary;

            if (defaults.TryGetValue(t, out var result))
            {
                return result;
            }

            if (t.IsEnumerable())
            {
                return "[]";
            }

            if (typeDictionary.ContainsKey(t))
            {
                return "default" + t.ToTsType();
            }

            return "null as any";// $"default{t.Name}";
        }
    }
}
