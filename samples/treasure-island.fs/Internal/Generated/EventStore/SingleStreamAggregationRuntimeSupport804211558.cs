// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: SingleStreamAggregationLiveAggregation804211558
    public class SingleStreamAggregationLiveAggregation804211558 : Marten.Events.Aggregation.SyncLiveAggregatorBase<TreasureIsland.Game>
    {
        private readonly Marten.Events.Aggregation.SingleStreamAggregation<TreasureIsland.Game> _singleStreamAggregation;

        public SingleStreamAggregationLiveAggregation804211558(Marten.Events.Aggregation.SingleStreamAggregation<TreasureIsland.Game> singleStreamAggregation)
        {
            _singleStreamAggregation = singleStreamAggregation;
        }



        public override TreasureIsland.Game Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, TreasureIsland.Game snapshot)
        {
            if (!events.Any()) return null;
            TreasureIsland.Game game = null;
            snapshot ??= Create(events[0], session);
            foreach (var @event in events)
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public TreasureIsland.Game Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return new TreasureIsland.Game();
        }


        public TreasureIsland.Game Apply(Marten.Events.IEvent @event, TreasureIsland.Game aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<TreasureIsland.GameEvent> event_GameEvent1:
                    aggregate = aggregate.Apply(event_GameEvent1.Data, @event);
                    break;
                case Marten.Events.IEvent<TreasureIsland.ItemDropped> event_ItemDropped2:
                    aggregate = aggregate.Apply(event_ItemDropped2.Data);
                    break;
                case Marten.Events.IEvent<TreasureIsland.ActiveUnitChanged> event_ActiveUnitChanged3:
                    aggregate = aggregate.Apply(event_ActiveUnitChanged3.Data);
                    break;
                case Marten.Events.IEvent<TreasureIsland.GameAborted> event_GameAborted4:
                    aggregate = aggregate.Apply(event_GameAborted4.Data);
                    break;
                case Marten.Events.IEvent<TreasureIsland.GameDrawn> event_GameDrawn5:
                    aggregate = aggregate.Apply(event_GameDrawn5.Data);
                    break;
                case Marten.Events.IEvent<TreasureIsland.GameEnded> event_GameEnded6:
                    aggregate = aggregate.Apply(event_GameEnded6.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: SingleStreamAggregationLiveAggregation804211558
    
    
    // START: SingleStreamAggregationInlineHandler804211558
    public class SingleStreamAggregationInlineHandler804211558 : Marten.Events.Aggregation.AggregationRuntime<TreasureIsland.Game, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<TreasureIsland.Game, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<TreasureIsland.Game, System.Guid> _storage;
        private readonly Marten.Events.Aggregation.SingleStreamAggregation<TreasureIsland.Game> _singleStreamAggregation;

        public SingleStreamAggregationInlineHandler804211558(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<TreasureIsland.Game, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<TreasureIsland.Game, System.Guid> storage, Marten.Events.Aggregation.SingleStreamAggregation<TreasureIsland.Game> singleStreamAggregation) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _singleStreamAggregation = singleStreamAggregation;
        }



        public override async System.Threading.Tasks.ValueTask<TreasureIsland.Game> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<TreasureIsland.Game, System.Guid> slice, Marten.Events.IEvent evt, TreasureIsland.Game aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<TreasureIsland.GameEvent> event_GameEvent7:
                    aggregate ??= new TreasureIsland.Game();
                    aggregate = aggregate.Apply(event_GameEvent7.Data, evt);
                    return aggregate;
                case Marten.Events.IEvent<TreasureIsland.ItemDropped> event_ItemDropped8:
                    aggregate ??= new TreasureIsland.Game();
                    aggregate = aggregate.Apply(event_ItemDropped8.Data);
                    return aggregate;
                case Marten.Events.IEvent<TreasureIsland.ActiveUnitChanged> event_ActiveUnitChanged9:
                    aggregate ??= new TreasureIsland.Game();
                    aggregate = aggregate.Apply(event_ActiveUnitChanged9.Data);
                    return aggregate;
                case Marten.Events.IEvent<TreasureIsland.GameAborted> event_GameAborted10:
                    aggregate ??= new TreasureIsland.Game();
                    aggregate = aggregate.Apply(event_GameAborted10.Data);
                    return aggregate;
                case Marten.Events.IEvent<TreasureIsland.GameDrawn> event_GameDrawn11:
                    aggregate ??= new TreasureIsland.Game();
                    aggregate = aggregate.Apply(event_GameDrawn11.Data);
                    return aggregate;
                case Marten.Events.IEvent<TreasureIsland.GameEnded> event_GameEnded12:
                    aggregate ??= new TreasureIsland.Game();
                    aggregate = aggregate.Apply(event_GameEnded12.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public TreasureIsland.Game Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return new TreasureIsland.Game();
        }

    }

    // END: SingleStreamAggregationInlineHandler804211558
    
    
}

